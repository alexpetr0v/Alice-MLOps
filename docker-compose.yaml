version: "3.8"

services:

    minio:
        container_name: minio
        hostname: minio
        image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
        command: server --console-address ":9001" /data/
        expose:
            - "9000"
            - "9001"
        networks:
            - s3
        environment:
            MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
            MINIO_SECRET_KEY: ${AWS_MINIO_SECRET_KEY}
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        volumes:
            - ./Docker/minio/:/data
    
    minio-default-buckets:
        container_name: minio-mc
        image: minio/mc
        depends_on:
            - minio
        volumes:
            - ./Docker/minio-mc/wait-for-it.sh:/usr/bin/wait-for-it.sh
        entrypoint: >
              /bin/sh -c '
              /usr/bin/wait-for-it.sh minio:9000 -t 30 -s -- echo "minio:9000 is up and available";
              /usr/bin/wait-for-it.sh minio:9001 -t 30 -s -- echo "minio:9001 is up and available";
              /usr/bin/mc config host add minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
              /usr/bin/mc mb minio/${AWS_S3_BUCKET};
              /usr/bin/mc mb minio/${DVC_S3_BUCKET};
              exit 0;
              '
        networks:
            - s3
    
    nginx:
        image: nginx:1.19.2-alpine
        container_name: nginx
        hostname: nginx
        volumes:
            - ./Docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            - "9000:9001"
            - "9001:9001"
        networks:
            - s3
        depends_on:
            - minio
           
    db:
        container_name: postgres
        image: postgres
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGDATA: /data/postgres
        volumes:
            - ./Docker/postgres/:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - postgres
    
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        volumes:
            - ./Docker/pgadmin/:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - postgres
    
    mlflow:
        restart: always
        image: mlflow_server
        container_name: mlflow_server
        build:
            context: Docker/.images
            dockerfile: mlflow_server.Dockerfile
        ports:
            - "5000:5000"
        networks:
            - postgres
            - s3
        environment:
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
        command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB} --artifacts-destination s3://${AWS_S3_BUCKET}/mlartifacts --serve-artifacts --host 0.0.0.0 
    
    
    lr_app:
        image: lr_model_service
        container_name: lr_model_service
        build:
            context: ./
            dockerfile: Docker/.images/lr_model_service.Dockerfile
        environment:
            - alice-TD1tsSPw-py3.9=cfg/lr_model_service.yaml
            - LOGLEVEL=INFO
        ports:
            - "6060:80"
        networks:
            - s3
            
networks:
    s3:
        driver: bridge
    postgres:
        driver: bridge
            